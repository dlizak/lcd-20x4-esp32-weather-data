{"name":"Luftdaten","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_353"},"sections":{"items":[{"components":[{"name":"aqi","style":{"weight":"1.2"},"text":"AQI","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"pm10","style":{"weight":"1.2"},"text":"PM10","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"pm25","style":{"weight":"1.2"},"text":"PM2.5","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"temperature","style":{"weight":"1.2"},"text":"Temperature","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"humidity","style":{"weight":"1.2"},"text":"Humidity","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"pressure","style":{"weight":"1.2"},"text":"Pressure","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_353"}}},"uiCallbacks":[],"quickAppVariables":[],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- Weather type have no actions to handle\n-- To update temperature, update property \"Temperature\" with floating point number\n-- To update humidity, update property \"Humidity\" with floating point number\n-- To update wind speed, update property \"Wind\" with floating point number\n-- Eg. self:updateProperty(\"Temperature\", 18.12)\n-- To update weather condition, update properties \"ConditionCode\" and \"WeatherCondition\" or use method QuickApp:setCondition\n-- Eg. self:setCondition(\"clear\")\n\n-- Child devices classes\nclass \"LuftdatenWeather\" (QuickAppChild)\nfunction LuftdatenWeather:__init(device)\n    QuickAppChild.__init(self, device)\n    self:debug(\"Luftdaten: \" .. device.name .. \" init\")\nend\n\n-- Posible conditions: \"unknown\", \"clear\", \"rain\", \"snow\", \"storm\", \"cloudy\", \"fog\"\nfunction LuftdatenWeather:setCondition(condition)\n    local conditionCodes = { \n        unknown = 3200,\n        clear = 32,\n        rain = 40,\n        snow = 38,\n        storm = 666,\n        cloudy = 30,\n        fog = 20,\n    }\n\n    local conditionCode = conditionCodes[condition]\n\n    if conditionCode then\n        for id, child in pairs(self.childDevices) do\n            if (child.name == \"Luftdaten\") then\n                child:updateProperty(\"ConditionCode\", conditionCode)\n                child:updateProperty(\"WeatherCondition\", condition)\n            end\n        end\n    end\nend\n\nclass \"LuftdatenGenericSensor\" (QuickAppChild)\nfunction LuftdatenGenericSensor:__init(device)\n    QuickAppChild.__init(self, device)\n    self:debug(\"Luftdaten: \" .. device.name .. \" init\")\nend\n\nfunction QuickApp:createChild(name, type, uid)\n    local child = self:createChildDevice({\n        name = name,\n        type = type\n    }, LuftdatenGenericSensor)\n\n    self:trace(\"Child device created: \", child.id)\n    self:storeDevice(uid, child.id)\nend\n\nfunction QuickApp:createChildDevices()\n    self:createChild(\"Luftdaten - weather\", \"com.fibaro.weather\", \"weather\")\n    self:createChild(\"Luftdaten - temperature\", \"com.fibaro.temperatureSensor\", \"temperature\")\n    self:createChild(\"Luftdaten - humidity\", \"com.fibaro.humiditySensor\", \"humidity\")\n    self:createChild(\"Luftdaten - pressure\", \"com.fibaro.multilevelSensor\", \"pressure\")\n    self:createChild(\"Luftdaten - AQI\", \"com.fibaro.multilevelSensor\", \"aqi\")\nend\n\nfunction QuickApp:storeDevice(uid, hcId)\n    if (self.devicesMap == nil or self.devicesMap == \"\") then\n        self.devicesMap = {}\n    end\n\n    self.devicesMap[uid] = hcId\n    self:setVariable(\"devicesMap\", self.devicesMap)\nend\n\n-- Languages\nlocal i18n = {\n    en = {\n        temperature = \"Temperature: \",\n        humidity = \"Humidity: \",\n        pressure = \"Pressure: \"\n    },\n    pl = {\n        temperature = \"Temperatura: \",\n        humidity = \"Wilgotność: \",\n        pressure = \"Ciśnienie: \"\n    },\n    de = {\n        temperature = \"Temperatur: \",\n        humidity = \"Luftfeuchtigkeit: \",\n        pressure = \"Luftdruck: \"\n    }\n}\n\nfunction calculateAqiUS(pm25)\n  local aqiBreakpoints = {\n    {aqi = 0, pm25 = 0},\n    {aqi = 51, pm25 = 12.1},\n    {aqi = 101, pm25 = 35.5},\n    {aqi = 151, pm25 = 55.5},\n    {aqi = 201, pm25 = 150.5},\n    {aqi = 301, pm25 = 250.5},\n    {aqi = 401, pm25 = 350.5},\n    {aqi = 501, pm25 = 500.5}\n  }\n\n  function getCeiling(pm25)\n    for i = 1, #aqiBreakpoints, 1 do\n      if (pm25 < aqiBreakpoints[i].pm25) then\n        return aqiBreakpoints[i]\n      end\n    end\n  end\n\n  function getFloor(pm25)\n    for i = #aqiBreakpoints, 1, -1 do\n      if (pm25 >= aqiBreakpoints[i].pm25) then\n        return aqiBreakpoints[i]\n      end\n    end\n  end\n\n  local max = getCeiling(pm25)\n  local min = getFloor(pm25)\n\n  if (type(min) ~= 'nil' and type(max) ~= 'nil') then\n    return math.floor((pm25 - min.pm25) * (max.aqi - min.aqi) / (max.pm25 - min.pm25) + min.aqi)\n  else\n    return aqiBreakpoints[#aqiBreakpoints].aqi\n  end\nend\n\nfunction QuickApp:getData()\n    self.httpClient:request(\"http://\" .. self.sensorIp .. \"/data.json\", {\n        options={\n            headers = { \n                Accept = \"application/json\"\n            },\n            method = 'GET'\n        },\n        success = function(response)\n            local jsonResponse = json.decode(response.data)\n            data = {}\n\n            for _, sensor in ipairs(jsonResponse.sensordatavalues) do\n                local valueType = sensor.value_type\n                local value = sensor.value\n                local unit = \"\"\n\n                if (valueType == \"SDS_P1\") then\n                    data.pm10 = value;\n                    self:updateView(\"pm10\", \"text\", \"PM10: \" .. value .. \" µg/m³\")\n                elseif (valueType == \"SDS_P2\") then\n                    data.pm25 = value;\n                    data.aqi = calculateAqiUS(tonumber(value))\n                    self:updateView(\"pm25\", \"text\", \"PM2.5: \" .. value .. \" µg/m³\")\n                    self:updateView(\"aqi\", \"text\", \"AQI: \" .. data.aqi)\n                    self.childDevices[self.devicesMap[\"aqi\"]]:updateProperty(\"value\", data.aqi)\n                elseif(valueType == \"temperature\" or valueType == \"BME280_temperature\") then\n                    data.temperature = tonumber(value)\n                    self:updateView(\"temperature\", \"text\", i18n[self.language].temperature .. data.temperature .. \"°C\")\n                    self.childDevices[self.devicesMap[\"weather\"]]:updateProperty(\"Temperature\", data.temperature)\n                    self.childDevices[self.devicesMap[\"temperature\"]]:updateProperty(\"value\", data.temperature)\n                elseif(valueType == \"humidity\" or valueType == \"BME280_humidity\") then\n                    data.humidity = tonumber(value)\n                    self:updateView(\"humidity\", \"text\", i18n[self.language].humidity .. data.humidity .. \" %\")\n                    self.childDevices[self.devicesMap[\"weather\"]]:updateProperty(\"Humidity\", data.humidity)\n                    self.childDevices[self.devicesMap[\"humidity\"]]:updateProperty(\"value\", data.humidity)\n                elseif(valueType == \"BME280_pressure\") then\n                    data.pressure = math.floor(value)/100\n                    self:updateProperty(\"Pressure\", data.pressure)\n                    self:updateView(\"pressure\", \"text\", i18n[self.language].pressure .. data.pressure .. \" hPa\")\n                    self.childDevices[self.devicesMap[\"pressure\"]]:updateProperty(\"value\", data.pressure)\n                end\n            end\n\n            self:debug(\"Luftdaten data updated: \", \"PM10: \" .. (data.pm10 or \"\"), \", PM2.5: \" .. (data.pm25 or \"\") .. \", AQI: \" .. (data.aqi or \"\") .. \", Temperature: \" .. data.temperature .. \", Humidity: \" .. data.humidity .. \", Pressure: \" .. data.pressure)\n\n            if (self.lcdIp ~= nil and self.lcdIp ~= \"\") then\n                self.httpClient:request(\"http://\" .. self.lcdIp .. \"/display?temperature=\" .. data.temperature .. \"&humidity=\" .. data.humidity .. \"&pressure=\" .. data.pressure .. \"&aqi=\" .. (data.aqi or \"\"), {\n                    options={\n                        method = 'GET'\n                    },\n                    success = function(response)\n                        self:debug(\"Luftdaten: send data to LCD (\" .. self.lcdIp .. \"): \", response.status);\n                    end,\n                    error = function(error)\n                        self:error(\"Luftdaten: send data to LCD (\" .. self.lcdIp .. \"): \", json.encode(error))\n                    end\n                })\n            end\n\n            fibaro.setTimeout(self.interval * 1000, function()\n                self:getData()\n            end)\n        end,\n        error = function(error)\n            self:error(\"Luftdaten - data fetch error: \", \"retrying in 10 seconds\")\n            fibaro.setTimeout(10000, function()\n                self:getData()\n            end)\n        end\n    })\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"Luftdaten: init\")\n    self.httpClient = net.HTTPClient()\n    self.sensorIp = self:getVariable(\"sensorIp\")\n    self.interval = tonumber(self:getVariable(\"interval\"))\n    self.language = self:getVariable(\"language\")\n    self.lcdIp = self:getVariable(\"lcdIp\")\n    self.devicesMap = self:getVariable(\"devicesMap\")\n\n    if (self.interval == nil or self.interval == \"\") then\n        self.interval = 145\n    end\n\n    if (self.language == nil or self.language == \"\") then\n        self.language = \"en\"\n    end\n\n    if (self.devicesMap == nil or self.devicesMap == \"\" or next(self.devicesMap) == nil) then\n        self:createChildDevices()\n    end\n\n    self:initChildDevices({\n        [\"com.fibaro.weather\"] = LuftdatenWeather,\n        [\"com.fibaro.temperatureSensor\"] = LuftdatenGenericSensor,\n        [\"com.fibaro.humiditySensor\"] = LuftdatenGenericSensor,\n        [\"com.fibaro.multilevelSensor\"] = LuftdatenGenericSensor,\n    })\n\n    if (self.sensorIp == nil or self.sensorIp == \"\") then\n        self.error(\"Luftdaten\", \"Luftdaten: Please define \\\"sensorIp\\\" device variable\")\n    else\n        self:getData()\n    end\nend\n"}]}